{"ast":null,"code":"var _jsxFileName = \"/Users/larisabulacheva/nutrition-calculator/src/ui/app/app.tsx\";\nimport React from 'react';\nimport Meal from '../meal/meal';\nimport { config } from '../../dev/config';\nimport './app.css';\n\nconst getDefaults = fieldName => {\n  return config.defaultValues.meals.find(meal => {\n    return meal.name === fieldName;\n  });\n};\n\nconst getValuesByName = () => {\n  return config.defaultValues.meals.map(meal => {\n    return meal.name;\n  });\n};\n\nexport default class App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      meals: [getDefaults('breakfast').defaultValue, getDefaults('lunch').defaultValue, getDefaults('dinner').defaultValue]\n    };\n\n    this.renderAllMeals = allMeals => {\n      return allMeals.map(fieldName => {\n        return this.renderMeal(fieldName);\n      });\n    };\n\n    this.renderMeal = fieldName => {\n      return /*#__PURE__*/React.createElement(Meal, {\n        changeValue: this.changeValue,\n        maxLimit: config.limits.meal,\n        nutritionValues: this.state[fieldName],\n        fieldData: getDefaults(fieldName),\n        suffix: config.uiText.suffix,\n        onRemove: this.onRemove,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 12\n        }\n      });\n    };\n\n    this.changeValue = (value, fieldName) => {\n      this.setState({\n        [fieldName]: value.value\n      });\n    };\n\n    this.onRemove = fieldName => {\n      // const fieldIndex = (this.state as In)\n      // findIndex((field: IndexedTextAndNumberFieldData) => {\n      //   return field.fieldName === fieldName\n      // }) as number\n      this.setState({// [fieldName]: value.value,\n      });\n    };\n  }\n\n  render() {\n    const allMeals = config.defaultValues.meals.map(meal => {\n      return meal.name;\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"root\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, this.renderAllMeals(allMeals));\n  }\n\n}","map":{"version":3,"sources":["/Users/larisabulacheva/nutrition-calculator/src/ui/app/app.tsx"],"names":["React","Meal","config","getDefaults","fieldName","defaultValues","meals","find","meal","name","getValuesByName","map","App","Component","state","defaultValue","renderAllMeals","allMeals","renderMeal","changeValue","limits","uiText","suffix","onRemove","value","setState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,cAAjB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,OAAO,WAAP;;AAQA,MAAMC,WAAW,GAAIC,SAAD,IAA4C;AAC9D,SAAOF,MAAM,CAACG,aAAP,CAAqBC,KAArB,CAA2BC,IAA3B,CAAiCC,IAAD,IAAoB;AACzD,WAAOA,IAAI,CAACC,IAAL,KAAcL,SAArB;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,MAAMM,eAAe,GAAG,MAAM;AAC5B,SAAOR,MAAM,CAACG,aAAP,CAAqBC,KAArB,CAA2BK,GAA3B,CAAgCH,IAAD,IAAoB;AACxD,WAAOA,IAAI,CAACC,IAAZ;AACD,GAFM,CAAP;AAGD,CAJD;;AAQA,eAAe,MAAMG,GAAN,SAAkBZ,KAAK,CAACa,SAAxB,CAA6C;AAAA;AAAA;AAAA,SACnDC,KADmD,GACpC;AACpBR,MAAAA,KAAK,EAAE,CACLH,WAAW,CAAC,WAAD,CAAX,CAAyBY,YADpB,EAELZ,WAAW,CAAC,OAAD,CAAX,CAAqBY,YAFhB,EAGLZ,WAAW,CAAC,QAAD,CAAX,CAAsBY,YAHjB;AADa,KADoC;;AAAA,SAmBlDC,cAnBkD,GAmBhCC,QAAD,IAA8C;AACrE,aAAOA,QAAQ,CAACN,GAAT,CAAcP,SAAD,IAAuB;AACzC,eAAO,KAAKc,UAAL,CAAgBd,SAAhB,CAAP;AACD,OAFM,CAAP;AAGD,KAvByD;;AAAA,SAyBlDc,UAzBkD,GAyBpCd,SAAD,IAA2C;AAC9D,0BAAO,oBAAC,IAAD;AACL,QAAA,WAAW,EAAE,KAAKe,WADb;AAEL,QAAA,QAAQ,EAAEjB,MAAM,CAACkB,MAAP,CAAcZ,IAFnB;AAGL,QAAA,eAAe,EAAG,KAAKM,KAAN,CAA0BV,SAA1B,CAHZ;AAIL,QAAA,SAAS,EAAED,WAAW,CAACC,SAAD,CAJjB;AAKL,QAAA,MAAM,EAAEF,MAAM,CAACmB,MAAP,CAAcC,MALjB;AAML,QAAA,QAAQ,EAAE,KAAKC,QANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAQD,KAlCyD;;AAAA,SAqClDJ,WArCkD,GAqCpC,CAACK,KAAD,EAA4BpB,SAA5B,KAAwD;AAC5E,WAAKqB,QAAL,CAAc;AACZ,SAACrB,SAAD,GAAaoB,KAAK,CAACA;AADP,OAAd;AAGD,KAzCyD;;AAAA,SA2ClDD,QA3CkD,GA2CtCnB,SAAD,IAA6B;AAC9C;AAEA;AACA;AACA;AACA,WAAKqB,QAAL,CAAc,CACZ;AADY,OAAd;AAGD,KApDyD;AAAA;;AAQnDC,EAAAA,MAAP,GAAoC;AAClC,UAAMT,QAAQ,GAAGf,MAAM,CAACG,aAAP,CAAqBC,KAArB,CAA2BK,GAA3B,CAAgCH,IAAD,IAAoB;AAClE,aAAOA,IAAI,CAACC,IAAZ;AACD,KAFgB,CAAjB;AAGA,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKO,cAAL,CAAoBC,QAApB,CADH,CADF;AAKD;;AAjByD","sourcesContent":["import React from 'react';\nimport NumberFormat, { NumberFormatValues } from 'react-number-format'\nimport Meal from '../meal/meal'\nimport { config } from '../../dev/config';\nimport './app.css';\nimport { MealData, Indexable } from '../../store/types';\n\ntype State = {\n  meals: number[]\n\n}\n\nconst getDefaults = (fieldName: string | string[]): MealData => {\n  return config.defaultValues.meals.find((meal: MealData) => {\n    return meal.name === fieldName\n  }) as MealData\n}\n\nconst getValuesByName = () => {\n  return config.defaultValues.meals.map((meal: MealData) => {\n    return meal.name\n  })\n}\n\n\n\nexport default class App extends React.Component<{}, State> {\n  public state: State = {\n    meals: [\n      getDefaults('breakfast').defaultValue,\n      getDefaults('lunch').defaultValue,\n      getDefaults('dinner').defaultValue]\n  }\n\n  public render(): React.ReactElement {\n    const allMeals = config.defaultValues.meals.map((meal: MealData) => {\n      return meal.name\n    })\n    return (\n      <div className=\"root\">\n        {this.renderAllMeals(allMeals)}\n      </div>\n    )\n  }\n\n  private renderAllMeals = (allMeals: string[]): React.ReactElement[] => {\n    return allMeals.map((fieldName: string) => {\n      return this.renderMeal(fieldName)\n    })\n  }\n\n  private renderMeal = (fieldName: string): React.ReactElement => {\n    return <Meal\n      changeValue={this.changeValue}\n      maxLimit={config.limits.meal}\n      nutritionValues={(this.state as Indexable)[fieldName]}\n      fieldData={getDefaults(fieldName)}\n      suffix={config.uiText.suffix}\n      onRemove={this.onRemove}\n    />\n  }\n\n\n  private changeValue = (value: NumberFormatValues, fieldName: string): void => {\n    this.setState({\n      [fieldName]: value.value,\n    } as any)\n  }\n\n  private onRemove = (fieldName: string): void => {\n    // const fieldIndex = (this.state as In)\n\n    // findIndex((field: IndexedTextAndNumberFieldData) => {\n    //   return field.fieldName === fieldName\n    // }) as number\n    this.setState({\n      // [fieldName]: value.value,\n    } as any)\n  }\n}"]},"metadata":{},"sourceType":"module"}