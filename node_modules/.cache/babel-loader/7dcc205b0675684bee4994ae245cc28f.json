{"ast":null,"code":"var _jsxFileName = \"/Users/larisabulacheva/nutrition-calculator/src/ui/app/app.tsx\";\nimport React from 'react';\nimport Meal from '../meal/meal';\nimport { config } from '../../dev/config';\nimport './app.css';\n\nconst getDefaultDataByName = fieldName => {\n  return config.defaultValues.meals.find(field => {\n    return field.name === fieldName;\n  });\n};\n\nconst getValuesByName = () => {\n  return config.defaultValues.meals.map(field => {\n    return field.name;\n  });\n};\n\nconst getDefaults = () => {\n  console.log(getValuesByName());\n  return getValuesByName().map(name => {\n    return {\n      name,\n      value: getDefaultDataByName(name).defaultValue,\n      isActive: true\n    };\n  });\n};\n\nexport default class App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fields: getDefaults()\n    };\n\n    this.drawAllFields = allFields => {\n      return allFields.map(fieldName => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: fieldName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 9\n          }\n        }, this.renderMeal(fieldName));\n      });\n    };\n\n    this.getSum = () => {\n      return this.state.fields.reduce((accumulator, field) => {\n        return accumulator + field.value;\n      }, 0);\n    };\n\n    this.renderMeal = fieldName => {\n      const fieldIndex = this.getIndexByField(fieldName);\n\n      if (fieldIndex !== undefined) {\n        return /*#__PURE__*/React.createElement(Meal, {\n          changeValue: this.changeValue,\n          maxLimit: config.limits.meal,\n          currentNutritionData: this.state.fields[fieldIndex],\n          fieldData: getDefaultDataByName(fieldName),\n          suffix: config.uiText.suffix,\n          disableField: this.disableField,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 14\n          }\n        });\n      }\n    };\n\n    this.changeValue = (value, fieldName) => {\n      const newFields = [...this.state.fields];\n      const fieldIndex = this.getIndexByField(fieldName);\n\n      if (fieldIndex) {\n        newFields[fieldIndex].value = value.floatValue || 0;\n        this.setState({\n          fields: newFields\n        });\n      }\n    };\n\n    this.disableField = fieldName => {\n      const updatedFields = [...this.state.fields];\n      const fieldIndex = this.getIndexByField(fieldName);\n\n      if (fieldIndex) {\n        updatedFields[fieldIndex].isActive = !updatedFields[fieldIndex].isActive;\n        this.setState({\n          fields: updatedFields\n        });\n      }\n    };\n\n    this.getIndexByField = fieldName => {\n      return this.state.fields.findIndex(field => {\n        return field.name === fieldName;\n      });\n    };\n  }\n\n  render() {\n    const allFields = this.state.fields.map(field => {\n      return field.name;\n    });\n    const sum = this.getSum();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"root\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, this.drawAllFields(allFields), config.uiText.total + sum);\n  }\n\n}","map":{"version":3,"sources":["/Users/larisabulacheva/nutrition-calculator/src/ui/app/app.tsx"],"names":["React","Meal","config","getDefaultDataByName","fieldName","defaultValues","meals","find","field","name","getValuesByName","map","getDefaults","console","log","value","defaultValue","isActive","App","Component","state","fields","drawAllFields","allFields","renderMeal","getSum","reduce","accumulator","fieldIndex","getIndexByField","undefined","changeValue","limits","meal","uiText","suffix","disableField","newFields","floatValue","setState","updatedFields","findIndex","render","sum","total"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { NumberFormatValues } from 'react-number-format'\nimport Meal from '../meal/meal'\nimport { config } from '../../dev/config';\nimport './app.css';\nimport { MealData, FieldType } from '../../store/types';\n\ntype State = {\n  fields: FieldType[]\n}\n\nconst getDefaultDataByName = (fieldName: string): MealData => {\n  return config.defaultValues.meals.find((field: MealData) => {\n    return field.name === fieldName\n  }) as MealData\n}\n\nconst getValuesByName = () => {\n  return config.defaultValues.meals.map((field: MealData) => {\n    return field.name\n  })\n}\n\nconst getDefaults = (): FieldType[] => {\n  console.log(getValuesByName())\n  return getValuesByName().map((name: string) => {\n    return {\n      name,\n      value: getDefaultDataByName(name).defaultValue,\n      isActive: true\n    }\n  })\n}\n\nexport default class App extends React.Component<{}, State> {\n  public state: State = {\n    fields: getDefaults()\n  }\n\n  public render(): React.ReactElement {\n    const allFields = this.state.fields.map((field: FieldType) => {\n      return field.name\n    })\n    const sum = this.getSum()\n    return (\n      <div className=\"root\">\n        {this.drawAllFields(allFields)}\n        {config.uiText.total + sum}\n      </div>\n    )\n  }\n\n  private drawAllFields = (allFields: string[]): React.ReactElement[] => {\n    return allFields.map((fieldName: string) => {\n      return (\n        <div key={fieldName}>\n          {this.renderMeal(fieldName)}\n        </div>\n      )\n    })\n  }\n\n  private getSum = (): number => {\n    return this.state.fields.reduce(\n      (accumulator: number, field: FieldType): number => {\n        return accumulator + field.value\n      },\n      0,\n    )\n  }\n\n  private renderMeal = (fieldName: string): React.ReactElement | undefined => {\n    const fieldIndex = this.getIndexByField(fieldName)\n    if (fieldIndex !== undefined) {\n      return <Meal\n        changeValue={this.changeValue}\n        maxLimit={config.limits.meal}\n        currentNutritionData={this.state.fields[fieldIndex]}\n        fieldData={getDefaultDataByName(fieldName)}\n        suffix={config.uiText.suffix}\n        disableField={this.disableField}\n      />\n    }\n  }\n\n\n  private changeValue = (value: NumberFormatValues, fieldName: string): void => {\n    const newFields = [\n      ...this.state.fields\n    ]\n    const fieldIndex = this.getIndexByField(fieldName)\n    if (fieldIndex) {\n      newFields[fieldIndex].value = value.floatValue || 0\n      this.setState({\n        fields: newFields\n      })\n    }\n  }\n\n  private disableField = (fieldName: string): void => {\n    const updatedFields = [\n      ...this.state.fields\n    ]\n    const fieldIndex = this.getIndexByField(fieldName)\n    if (fieldIndex) {\n      updatedFields[fieldIndex].isActive = !updatedFields[fieldIndex].isActive\n      this.setState({\n        fields: updatedFields\n      })\n    }\n  }\n\n  private getIndexByField = (fieldName: string): number | undefined => {\n    return this.state.fields.findIndex((field: FieldType) => {\n      return field.name === fieldName\n    })\n  }\n}"]},"metadata":{},"sourceType":"module"}