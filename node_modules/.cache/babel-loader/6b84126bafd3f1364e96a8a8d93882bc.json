{"ast":null,"code":"var _jsxFileName = \"/Users/larisabulacheva/nutrition-calculator/src/ui/app/app.tsx\";\nimport React from 'react';\nimport Meal from '../meal/meal';\nimport { config } from '../../dev/config';\nimport './app.css';\n\nconst getMealData = fieldName => {\n  return config.defaultValues.meals.find(meal => {\n    return meal.name === fieldName;\n  });\n};\n\nconst getValuesByName = () => {\n  return config.defaultValues.meals.map(meal => {\n    return meal.name;\n  });\n};\n\nconst getDefaults = () => {\n  return getValuesByName().map(name => {\n    return {\n      name,\n      value: getMealData(name).defaultValue\n    };\n  });\n};\n\nexport default class App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      meals: getDefaults()\n    };\n\n    this.getAllMeals = allMeals => {\n      return allMeals.map(fieldName => {\n        return this.renderMeal(fieldName);\n      });\n    };\n\n    this.renderMeal = fieldName => {\n      return /*#__PURE__*/React.createElement(Meal, {\n        changeValue: this.changeValue,\n        maxLimit: config.limits.meal,\n        nutritionValues: getMealData(fieldName).defaultValue,\n        fieldData: getMealData(fieldName),\n        suffix: config.uiText.suffix,\n        onRemove: this.onRemove,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 12\n        }\n      });\n    };\n\n    this.changeValue = (value, fieldName) => {\n      const newValue = value.floatValue;\n      const newMeals = [...this.state.meals //  fieldName: newValue\n      ];\n      const fieldIndex = this.state.meals.findIndex(meal => {\n        return meal.name === fieldName;\n      });\n      console.log(fieldIndex);\n      console.log('change?', fieldName, value.floatValue, this.state.meals);\n      this.setState({\n        meals: newMeals,\n        fieldName: newValue\n      });\n    };\n\n    this.onRemove = fieldName => {\n      // const fieldIndex = (this.state as In)\n      // findIndex((field: IndexedTextAndNumberFieldData) => {\n      //   return field.fieldName === fieldName\n      // }) as number\n      this.setState({// [fieldName]: value.value,\n      });\n    };\n  }\n\n  render() {\n    const allMeals = config.defaultValues.meals.map(meal => {\n      return meal.name;\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"root\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, this.getAllMeals(allMeals));\n  }\n\n}","map":{"version":3,"sources":["/Users/larisabulacheva/nutrition-calculator/src/ui/app/app.tsx"],"names":["React","Meal","config","getMealData","fieldName","defaultValues","meals","find","meal","name","getValuesByName","map","getDefaults","value","defaultValue","App","Component","state","getAllMeals","allMeals","renderMeal","changeValue","limits","uiText","suffix","onRemove","newValue","floatValue","newMeals","fieldIndex","findIndex","console","log","setState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,cAAjB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,OAAO,WAAP;;AAYA,MAAMC,WAAW,GAAIC,SAAD,IAAiC;AACnD,SAAOF,MAAM,CAACG,aAAP,CAAqBC,KAArB,CAA2BC,IAA3B,CAAiCC,IAAD,IAAoB;AACzD,WAAOA,IAAI,CAACC,IAAL,KAAcL,SAArB;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,MAAMM,eAAe,GAAG,MAAM;AAC5B,SAAOR,MAAM,CAACG,aAAP,CAAqBC,KAArB,CAA2BK,GAA3B,CAAgCH,IAAD,IAAoB;AACxD,WAAOA,IAAI,CAACC,IAAZ;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,MAAMG,WAAW,GAAG,MAAkB;AACpC,SAAOF,eAAe,GAAGC,GAAlB,CAAuBF,IAAD,IAAkB;AAC7C,WAAO;AACLA,MAAAA,IADK;AAELI,MAAAA,KAAK,EAAEV,WAAW,CAACM,IAAD,CAAX,CAAkBK;AAFpB,KAAP;AAID,GALM,CAAP;AAMD,CAPD;;AASA,eAAe,MAAMC,GAAN,SAAkBf,KAAK,CAACgB,SAAxB,CAA6C;AAAA;AAAA;AAAA,SACnDC,KADmD,GACpC;AACpBX,MAAAA,KAAK,EAAEM,WAAW;AADE,KADoC;;AAAA,SAgBlDM,WAhBkD,GAgBnCC,QAAD,IAA8C;AAClE,aAAOA,QAAQ,CAACR,GAAT,CAAcP,SAAD,IAAuB;AACzC,eAAO,KAAKgB,UAAL,CAAgBhB,SAAhB,CAAP;AACD,OAFM,CAAP;AAGD,KApByD;;AAAA,SAsBlDgB,UAtBkD,GAsBpChB,SAAD,IAA2C;AAC9D,0BAAO,oBAAC,IAAD;AACL,QAAA,WAAW,EAAE,KAAKiB,WADb;AAEL,QAAA,QAAQ,EAAEnB,MAAM,CAACoB,MAAP,CAAcd,IAFnB;AAGL,QAAA,eAAe,EAAEL,WAAW,CAACC,SAAD,CAAX,CAAuBU,YAHnC;AAIL,QAAA,SAAS,EAAEX,WAAW,CAACC,SAAD,CAJjB;AAKL,QAAA,MAAM,EAAEF,MAAM,CAACqB,MAAP,CAAcC,MALjB;AAML,QAAA,QAAQ,EAAE,KAAKC,QANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAQD,KA/ByD;;AAAA,SAkClDJ,WAlCkD,GAkCpC,CAACR,KAAD,EAA4BT,SAA5B,KAAwD;AAE5E,YAAMsB,QAAQ,GAAGb,KAAK,CAACc,UAAvB;AACA,YAAMC,QAAQ,GAAG,CACf,GAAG,KAAKX,KAAL,CAAWX,KADC,CAEf;AAFe,OAAjB;AAKA,YAAMuB,UAAU,GAAG,KAAKZ,KAAL,CAAWX,KAAX,CAAiBwB,SAAjB,CAA4BtB,IAAD,IAAoB;AAChE,eAAOA,IAAI,CAACC,IAAL,KAAcL,SAArB;AACD,OAFkB,CAAnB;AAGA2B,MAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AAGAE,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB5B,SAAvB,EAAkCS,KAAK,CAACc,UAAxC,EAAoD,KAAKV,KAAL,CAAWX,KAA/D;AAGA,WAAK2B,QAAL,CAAc;AACZ3B,QAAAA,KAAK,EAAEsB,QADK;AAEZxB,QAAAA,SAAS,EAAEsB;AAFC,OAAd;AAKD,KAxDyD;;AAAA,SAgElDD,QAhEkD,GAgEtCrB,SAAD,IAA6B;AAC9C;AAEA;AACA;AACA;AACA,WAAK6B,QAAL,CAAc,CACZ;AADY,OAAd;AAGD,KAzEyD;AAAA;;AAKnDC,EAAAA,MAAP,GAAoC;AAClC,UAAMf,QAAQ,GAAGjB,MAAM,CAACG,aAAP,CAAqBC,KAArB,CAA2BK,GAA3B,CAAgCH,IAAD,IAAoB;AAClE,aAAOA,IAAI,CAACC,IAAZ;AACD,KAFgB,CAAjB;AAGA,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKS,WAAL,CAAiBC,QAAjB,CADH,CADF;AAKD;;AAdyD","sourcesContent":["import React from 'react';\nimport NumberFormat, { NumberFormatValues } from 'react-number-format'\nimport Meal from '../meal/meal'\nimport { config } from '../../dev/config';\nimport './app.css';\nimport { MealData, Indexable } from '../../store/types';\n\ntype State = {\n  meals: MealType[]\n}\n\ntype MealType = {\n  name: string\n  value: number\n}\n\nconst getMealData = (fieldName: string): MealData => {\n  return config.defaultValues.meals.find((meal: MealData) => {\n    return meal.name === fieldName\n  }) as MealData\n}\n\nconst getValuesByName = () => {\n  return config.defaultValues.meals.map((meal: MealData) => {\n    return meal.name\n  })\n}\n\nconst getDefaults = (): MealType[] => {\n  return getValuesByName().map((name: string) => {\n    return {\n      name,\n      value: getMealData(name).defaultValue\n    }\n  })\n}\n\nexport default class App extends React.Component<{}, State> {\n  public state: State = {\n    meals: getDefaults()\n  }\n\n  public render(): React.ReactElement {\n    const allMeals = config.defaultValues.meals.map((meal: MealData) => {\n      return meal.name\n    })\n    return (\n      <div className=\"root\">\n        {this.getAllMeals(allMeals)}\n      </div>\n    )\n  }\n\n  private getAllMeals = (allMeals: string[]): React.ReactElement[] => {\n    return allMeals.map((fieldName: string) => {\n      return this.renderMeal(fieldName)\n    })\n  }\n\n  private renderMeal = (fieldName: string): React.ReactElement => {\n    return <Meal\n      changeValue={this.changeValue}\n      maxLimit={config.limits.meal}\n      nutritionValues={getMealData(fieldName).defaultValue}\n      fieldData={getMealData(fieldName)}\n      suffix={config.uiText.suffix}\n      onRemove={this.onRemove}\n    />\n  }\n\n\n  private changeValue = (value: NumberFormatValues, fieldName: string): void => {\n\n    const newValue = value.floatValue\n    const newMeals = [\n      ...this.state.meals,\n      //  fieldName: newValue\n    ]\n\n    const fieldIndex = this.state.meals.findIndex((meal: MealType) => {\n      return meal.name === fieldName\n    })\n    console.log(fieldIndex)\n\n\n    console.log('change?', fieldName, value.floatValue, this.state.meals)\n\n\n    this.setState({\n      meals: newMeals,\n      fieldName: newValue\n    } as any)\n\n  }\n\n  // const currentFieldIndex = this.state.meals.findIndex(\n  //   (field: number) => {\n  //     return field === fieldName\n  //   },\n  // )\n\n  private onRemove = (fieldName: string): void => {\n    // const fieldIndex = (this.state as In)\n\n    // findIndex((field: IndexedTextAndNumberFieldData) => {\n    //   return field.fieldName === fieldName\n    // }) as number\n    this.setState({\n      // [fieldName]: value.value,\n    } as any)\n  }\n}"]},"metadata":{},"sourceType":"module"}